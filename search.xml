<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Ajax全接触]]></title>
      <url>http://carvebone.com/2016/09/04/AJAX/</url>
      <content type="html"><![CDATA[<p></p><h1>Ajax全接触</h1> <p></p>
<h3 id="一、ajax介绍"><a href="#一、ajax介绍" class="headerlink" title="一、ajax介绍"></a>一、ajax介绍</h3><p>Asynchronous JavaScript and XML（异步的JavaScript和XML） 是一种在无需加载整个网页的情况之下能够更新部分网页的技术。<br>读音：A zhai ke si 不是 阿贾克斯<br>Ajax带来了网页的异步。<br><a id="more"></a></p>
<h3 id="二、介绍http-"><a href="#二、介绍http-" class="headerlink" title="二、介绍http ###"></a>二、介绍http ###</h3><p>http：计算机通过网路进行通信的协议 ###<br>http请求：<br>1、建立TCP连接<br>2、Web浏览器向Web服务器发送请求命令<br>3、Web浏览器发送请求头信息<br>4、Web服务器应答<br>5、Web服务器发送应答头信息<br>6、Web服务器向浏览器发送数据<br>7、Web浏览器关闭TCP连接 <br>http请求一般包含四部分：<br>1、方法： GET一般用于查询，使用URl传递参数； POST一般用于修改，内容嵌入到请求体中。 2、URL（地址）、<br>3、请求头、<br>4、请求体 <br>http相应一般包含三部分：<br>1、状态码：用来显示请求成功还是失败 2、响应头：包含例如服务器类型、日期时间、内容类型和长度啥的<br>3、响应体：响应的正文<br>注：http状态码：</p>
<p><img src="http://img.mukewang.com/57bef7a20001565f06920356.png" alt="无法显示"></p>
<h3 id="三、运用XMLHttpRequest对象"><a href="#三、运用XMLHttpRequest对象" class="headerlink" title="三、运用XMLHttpRequest对象"></a>三、运用XMLHttpRequest对象</h3><p>1、创建 new XMLHttpRequest();<br>2、发送方法：<br>open(method.uel,async)<br>senf(string):GET可以不填写string，但POST一般都要写些东西<br>3、取得响应<br>responseText ：获得字符串形式的响应数据<br>responseXML ：获得XML形式的响应数据<br>status和statusText ：以数字和文本形式返回HTTP状态码<br>getAllResponseHeader() ：获取所有的响应报头<br>getResponseHeader() ：查询响应中的某个字段的值<br>注：readyState属性 </p>
<p><img src="http://img.mukewang.com/57bef7e700010dbc06800304.png" alt="无法显示"></p>
<p>XMLHttpRequest使用： </p>
<p><img src="http://img.mukewang.com/57bef804000133f207220393.png" alt="无法显示"></p>
<h3 id="四、Ajax的简单例子"><a href="#四、Ajax的简单例子" class="headerlink" title="四、Ajax的简单例子"></a>四、Ajax的简单例子</h3><p>1、PHP端服务器：监听GET和POST，返回信息或更改信息。<br>PS：用fiddler这个软件在前台没有建立起来的情况下通过http（GET和POST）检测后台的程序。<br>2、前台程序的建立：<br>a、html代码布局出来。包含input、button、label等 b、script部分代码进行http的GET网络请求与刷新。 c、F12进行观察发送与接收http的信息。</p>
<h3 id="五、json-json"><a href="#五、json-json" class="headerlink" title="五、json json"></a>五、json json</h3><p><img src="http://img.mukewang.com/57bef8210001cfa409390415.png" alt="无法显示"></p>
<p>语法规则：<br>名称/值对 例：”name”:”hello” </p>
<p><img src="http://img.mukewang.com/57bef83c00018bb005290376.png" alt="无法显示"></p>
<p>名称/值对 json解析：<br>eval和JSON.parse<br>var json obj = eval( ‘(‘ + jsondata + ‘)’ );<br>var json obj = JSON.parse( ‘(‘ + jsondata + ‘)’ );<br>PS：json在线校验工具 jsonlint.com </p>
<h3 id="六、ajax第三方的封装："><a href="#六、ajax第三方的封装：" class="headerlink" title="六、ajax第三方的封装："></a>六、ajax第三方的封装：</h3><p>jQuery中的ajax使用</p>
<h3 id="七、跨域请求"><a href="#七、跨域请求" class="headerlink" title="七、跨域请求"></a>七、跨域请求</h3><p>javascript出于安全方面的考虑，不允许跨域调用其他页面的对象。<br>a.com域名下的js无法操作b.com域名下的对象。<br>1、后台服务器做代理<br>2、jsonp </p>
<p><img src="http://img.mukewang.com/57bef85b000185a508260527.png" alt="无法显示"><br>一般只支持GET请求，不支持POSt请求<br>3、 </p>
<p><img src="http://img.mukewang.com/57bef871000128b409090425.png" alt="无法显示"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dom事件学习笔记总结]]></title>
      <url>http://carvebone.com/2016/08/17/My-New-Post/</url>
      <content type="html"><![CDATA[<p></p><h3>事件</h3> <p>是文档或浏览器窗口中发生的特定的交互瞬间。【JavaScript &lt;——&gt;HTML】</p> <p></p>
<p></p><h3>事件流：</h3> <p>描述的是从页面中接受事件的顺序 （IE：事件冒泡流 / Netscape事件捕获流）</p><p></p>
<p></p><h3>事件冒泡：</h3><p>即事件最开始由最具体的元素（文档中嵌套最深的那个节点）接收，然后逐级向上传播至最不具体的那个节点（文档）。</p><br><a id="more"></a><p></p>
<p></p><h3>事件捕获：</h3> <p>不太具体的节点应该更早接收到元素，而最具体的节点最后接收到事件。</p><p></p>
<p></p><h3>HTML事件处理程序(现在不建议使用了): </h3><br>事件直接加在HTML代码中<br>缺点：HTML和js代码高耦合，如果修改，就要修改两个地方–HTML元素内和script函数。<p></p>
<h3 id="DOM0级事件处理程序（用得比较多）："><a href="#DOM0级事件处理程序（用得比较多）：" class="headerlink" title="DOM0级事件处理程序（用得比较多）："></a>DOM0级事件处理程序（用得比较多）：</h3><p>先把元素取出来，然后为其属性添加一个事件的方法叫DOM0级处理程序。 它是一种较传统的方式：把一个函数赋值给一个事件处理程序的属性。<br>优点：简单，跨浏览器的优势 var btn2=document.getElementById(“btn2”);—先获取出元素，定义对象 //取得btn2按钮对象<br>btn2.onclick=function(){alert(‘这是通过DOM0级添加的事件！’)}—-让 事件以对象的属性 的形式出现。 //给btn2添加onclick属性</p>
<h3 id="DOM2级事件处理程序"><a href="#DOM2级事件处理程序" class="headerlink" title="DOM2级事件处理程序"></a>DOM2级事件处理程序</h3><p>定义了两个方法–用于处理指定和删除事件处理程序的操作：<br>addEventListener()添加事件监听程序<br>removeEventListener()移除事件监听程序<br>三个参数设置;事件名称，处理方法(函数)，布尔值–false：表示在冒泡阶段调用事件处理程序(可以最大限度的兼容浏览器)，一般设为false；true表示在捕获阶段调用事件处理程序<br>btn3.addEventListener(‘click’,showMes,false);<br>注意：<br>1、若事件名称有on，则需去掉on。onclick –&gt; click，onmouseover –&gt; mouseover等等；<br>2、false 最大限度兼容所有浏览器–事件冒泡流。<br>3.通过addEventListener添加的事件只能通过removeEventListener来删除。–参数要与添加事件时相同 btn3.removeEventListener(参数);//参数必须和btn.addEventListener的参数一致，删除事件监听</p>
<p> <i>DOM0级和DOM2级事件处理程序可以给一个事件绑定多个函数，事件触发的时候会按照绑定顺序执行各个函数。如下所示：<br> btn3.addEventListener(‘click’,showMes,false);<br> btn3.addEventListener(‘click’,showMes,function(){alert(this.value）;},false);<br> 缺点：IE不支持该事件</i> </p>
<h3 id="IE事件处理程序："><a href="#IE事件处理程序：" class="headerlink" title="IE事件处理程序："></a>IE事件处理程序：</h3><p>IE也提供了类似DOM2级事件处理程序<br>attachEvent()添加事件<br>detachEvent()删除事件<br>接收相同的两个参数，事件处理程序的名称和事件处理程序的函数。去掉了布尔值，不使用第三个参数的原因:IE8以及更早的浏览器版本只支持事件冒泡！<br>在ie下给btn3添加事件<br>btn3.attachEvent(‘onclick’,showMes);<br>主意：在ie事件处理程序上，又要把on加上<br>btn3.detachEvent(‘onclick’,showMes);<br>支持ie事件处理程序的浏览器主要有ie和opera两个浏览器。</p>
<h3 id="跨浏览器事件处理程序"><a href="#跨浏览器事件处理程序" class="headerlink" title="跨浏览器事件处理程序"></a>跨浏览器事件处理程序</h3><pre><code>var eventUtil = { 
//添加句柄
 addHandler:function(element,type,handler){ 
         if(element.addEventListener){element.addEventListener(type,handler,false); } // DOM2级事件处理程序 
             else if(element.attachEvent){element.attachEvent('on'+type,handler);} // IE事件处理程序 
                 else{element['on'+type]=handler;} // DOM0级事件处理程序 }, //删除句柄 
 removeHandler:function(element,type,handler){ 
         if(element.removeEventListener){element.removeEventListener(type,handler,false);} // DOM2级事件处理程序 
         else if(element.detachEvent){element.detachEvent('on'+type,handler);} // IE事件处理程序 
         else{element['on'+type]=null;} //DOM0级事件处理程序
              }
           } eventUtil.addHandler(btn3,'click',showMessage);
           </code></pre>

<h3 id="js中所有用’-’的地方都可以使用’-’"><a href="#js中所有用’-’的地方都可以使用’-’" class="headerlink" title="js中所有用’.’的地方都可以使用’[]’"></a>js中所有用’.’的地方都可以使用’[]’</h3><p>如：对象的点击事件element.onclick===element[‘onclick’] 什么是事件对象？在触发DOM上的事件时都会产生一个对象 事件对象EVENT </p>
<h3 id="DOM中的事件对象-属性"><a href="#DOM中的事件对象-属性" class="headerlink" title="DOM中的事件对象 属性"></a>DOM中的事件对象 属性</h3><p>（1）、type属性用于获取事件类型<br>（2）、target属性用于获取事件目标<br>（3）、stopPropagation()方法 用于阻止事件冒泡<br>（4）、preventDefault() 方法 阻止事件的默认行为 </p>
<p><i>如果一个div里面有一个button，button和div都绑定了click事件，如果是事件冒泡，那么点击button的时候，首先触发button的处理函数，然后触发div的处理函数。（由内而外） 如果有时候不想冒泡，也就是不希望div的事件被触发，那么需要阻止事件冒泡。stopPropagation()方法<br>如果需要阻止a标签的默认属性跳转，可以使用阻止事件的默认行为preventDefault()方法</i> </p>
<h3 id="在IE中-几乎都是属性存在的"><a href="#在IE中-几乎都是属性存在的" class="headerlink" title="在IE中: 几乎都是属性存在的"></a>在IE中: 几乎都是属性存在的</h3><p> 1) event window.event (IE 8以前)<br> 2) srcElement属性： 用于获取目标  event.target event.srcElement<br> 3) cancleBubble属性: 用于阻止事件冒泡<br> 4) returnValue属性: 用于阻止事件的默认行为<br>  false表示阻止事件的默认行为</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery选择器总结]]></title>
      <url>http://carvebone.com/2016/07/22/jQuery%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="jQuery-的选择器可谓之强大无比，这里简单地总结一下常用的元素查找方法"><a href="#jQuery-的选择器可谓之强大无比，这里简单地总结一下常用的元素查找方法" class="headerlink" title="jQuery 的选择器可谓之强大无比，这里简单地总结一下常用的元素查找方法"></a>jQuery 的选择器可谓之强大无比，这里简单地总结一下常用的元素查找方法</h2><p>$(“#myELement”)    选择id值等于myElement的元素，id值不能重复在文档中只能有一个id值是myElement所以得到的是唯一的元素<br>$(“div”)           选择所有的div标签元素，返回div元素数组<br>$(“.myClass”)      选择使用myClass类的css的所有元素<br>$(“*”)             选择文档中的所有的元素，可以运用多种的选择方式进行联合选择：例如$(“#myELement,div,.myclass”)<br> <a id="more"></a></p>
<h2 id="层叠选择器："><a href="#层叠选择器：" class="headerlink" title="层叠选择器："></a>层叠选择器：</h2><p>$(“form input”)         选择所有的form元素中的input元素<br>$(“#main &gt; *”)          选择id值为main的所有的子元素<br>$(“label + input”)     选择所有的label元素的下一个input元素节点，经测试选择器返回的是label标签后面直接跟一个input标签的所有input标签元素<br>$(“#prev ~ div”)       同胞选择器，该选择器返回的为id为prev的标签元素的所有的属于同一个父元素的div标签 </p>
<h2 id="基本过滤选择器："><a href="#基本过滤选择器：" class="headerlink" title="基本过滤选择器："></a>基本过滤选择器：</h2><p>$(“tr:first”)               选择所有tr元素的第一个<br>$(“tr:last”)                选择所有tr元素的最后一个<br>$(“input:not(:checked) + span”)   </p>
<p>过滤掉：checked的选择器的所有的input元素 </p>
<p>$(“tr:even”)               选择所有的tr元素的第0，2，4… …个元素（注意：因为所选择的多个元素时为数组，所以序号是从0开始） </p>
<p>$(“tr:odd”)                选择所有的tr元素的第1，3，5… …个元素<br>$(“td:eq(2)”)             选择所有的td元素中序号为2的那个td元素<br>$(“td:gt(4)”)             选择td元素中序号大于4的所有td元素<br>$(“td:ll(4)”)              选择td元素中序号小于4的所有的td元素<br>$(“:header”)<br>$(“div:animated”) </p>
<h2 id="内容过滤选择器："><a href="#内容过滤选择器：" class="headerlink" title="内容过滤选择器："></a>内容过滤选择器：</h2><p>$(“div:contains(‘John’)”) 选择所有div中含有John文本的元素<br>$(“td:empty”)           选择所有的为空（也不包括文本节点）的td元素的数组<br>$(“div:has(p)”)        选择所有含有p标签的div元素<br>$(“td:parent”)          选择所有的以td为父节点的元素数组 </p>
<h2 id="可视化过滤选择器："><a href="#可视化过滤选择器：" class="headerlink" title="可视化过滤选择器："></a>可视化过滤选择器：</h2><p>$(“div:hidden”)        选择所有的被hidden的div元素<br>$(“div:visible”)        选择所有的可视化的div元素 </p>
<h2 id="属性过滤选择器："><a href="#属性过滤选择器：" class="headerlink" title="属性过滤选择器："></a>属性过滤选择器：</h2><p>$(“div[id]”)              选择所有含有id属性的div元素<br>$(“input[name=’newsletter’]”)    选择所有的name属性等于’newsletter’的input元素 </p>
<p>$(“input[name!=’newsletter’]”) 选择所有的name属性不等于’newsletter’的input元素 </p>
<p>$(“input[name^=’news’]”)         选择所有的name属性以’news’开头的input元素<br>$(“input[name$=’news’]”)         选择所有的name属性以’news’结尾的input元素<br>$(“input[name*=’man’]”)          选择所有的name属性包含’news’的input元素 </p>
<p>$(“input[id][name$=’man’]”)    可以使用多个属性进行联合选择，该选择器是得到所有的含有id属性并且那么属性以man结尾的元素 </p>
<h2 id="子元素过滤选择器："><a href="#子元素过滤选择器：" class="headerlink" title="子元素过滤选择器："></a>子元素过滤选择器：</h2><p>$(“ul li:nth-child(2)”),$(“ul li:nth-child(odd)”),$(“ul li:nth-child(3n + 1)”) </p>
<p>$(“div span:first-child”)          返回所有的div元素的第一个子节点的数组<br>$(“div span:last-child”)           返回所有的div元素的最后一个节点的数组<br>$(“div button:only-child”)       返回所有的div中只有唯一一个子节点的所有子节点的数组 </p>
<h2 id="表单元素选择器："><a href="#表单元素选择器：" class="headerlink" title="表单元素选择器："></a>表单元素选择器：</h2><p>$(“:input”)                  选择所有的表单输入元素，包括input, textarea, select 和 button </p>
<p>$(“:text”)                     选择所有的text input元素<br>$(“:password”)           选择所有的password input元素<br>$(“:radio”)                   选择所有的radio input元素<br>$(“:checkbox”)            选择所有的checkbox input元素<br>$(“:submit”)               选择所有的submit input元素<br>$(“:image”)                 选择所有的image input元素<br>$(“:reset”)                   选择所有的reset input元素<br>$(“:button”)                选择所有的button input元素<br>$(“:file”)                     选择所有的file input元素<br>$(“:hidden”)               选择所有类型为hidden的input元素或表单的隐藏域 </p>
<h2 id="表单元素过滤选择器："><a href="#表单元素过滤选择器：" class="headerlink" title="表单元素过滤选择器："></a>表单元素过滤选择器：</h2><p>$(“:enabled”)             选择所有的可操作的表单元素<br>$(“:disabled”)            选择所有的不可操作的表单元素<br>$(“:checked”)            选择所有的被checked的表单元素<br>$(“select option:selected”) 选择所有的select 的子元素中被selected的元素 </p>
<p>选取一个 name 为”S_03_22″的input text框的上一个td的text值<br>$(”input[@ name =S_03_22]“).parent().prev().text() </p>
<p>名字以”S_”开始，并且不是以”<em>R”结尾的<br>$(”input[@ name ^=’S</em>‘]“).not(”[@ name $=’_R’]“) </p>
<p>一个名为 radio_01的radio所选的值<br>$(”input[@ name =radio_01][@checked]“).val(); </p>
<p>$(“A B”) 查找A元素下面的所有子节点，包括非直接子节点<br>$(“A&gt;B”) 查找A元素下面的直接子节点<br>$(“A+B”) 查找A元素后面的兄弟节点，包括非直接子节点<br>$(“A~B”) 查找A元素后面的兄弟节点，不包括非直接子节点 </p>
<ol>
<li>$(“A B”) 查找A元素下面的所有子节点，包括非直接子节点 </li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://carvebone.com/2016/06/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
